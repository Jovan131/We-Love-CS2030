
// WHENEVER THIS FILE IS CHANGED, RUN THE COMMAND npx prisma migrate dev TO SYNC THE CHANGES TO THE DATABASE SERVER, then run
// npm prisma generate TO PULL THE CHANGES TO THE LOCAL PRISMA SCHEMA

// TO ADD NEW DATA FOR TESTING PURPOSES, RUN THE COMMAND npx prisma studio THEN ADD IN NEW RECORDS FROM THERE. REMEMBER TO 
// SAVE CHANGES

generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
}

enum UserRole {
  ADMIN
  IG_HEAD
  RESIDENT
}

model Resident {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  password String

  slots    Slot[]
  igs      IG[]

  igsHeaded IG[] @relation("IgsHeaded")
  igHeadApplications IgHeadApplication[]

  role UserRole @default(RESIDENT)

  active   Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  Token Token[]

  @@map("residents")
}

model Token {
  id  Int @id @default(autoincrement())
  token String @unique
  activatedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  resident Resident @relation(fields: [userId], references: [id])
  userId String
}

model Slot {
  id            String     @default(cuid()) @id
  capacity      Int?
  venue         String
  startDateTime DateTime   @map("start_date_time")
  duration      Int
  description   String?
  igName        String     @map("ig_name")
  ig            IG         @relation(fields: [igName], references: [name])
  residents     Resident[]
  @@map("slots")
}

model IG {
  id                   String @default(cuid()) @id
  name                 String @unique
  category             String
  numOfSessionsPerWeek Int    @map("num_of_sessions_per_week")
  slots                Slot[]
  announcements        Announcement[]
  members              Resident[]
  igHead               Resident? @relation("IgsHeaded", fields: [igHeadID], references: [id])
  igHeadID             String?
  igHeadApplications   IgHeadApplication[]
  @@map("igs")
}

model Announcement {
  id            String     @default(cuid()) @id
  title         String
  content       String
  createdDateTime DateTime   @default(now())
  igName        String     @map("ig_name")
  ig            IG         @relation(fields: [igName], references: [name])
  @@map("announcements")
}

model SearchQuery {
  id    String @id @default(cuid())
  query String
}

model IgHeadApplication {
  id                  String   @default(cuid()) @id
  applicant           Resident @relation(fields: [applicantEmail], references: [email])
  applicantFullName   String   @map("applicant_full_name")
  applicantTeleHandle String   @map("applicant_tele_handle")
  ig                  IG       @relation(fields: [igName], references: [name])
  igName              String   @map("ig_name")
  applicantEmail      String   @map("applicant_email")
  @@map("ig_head_applications")
}